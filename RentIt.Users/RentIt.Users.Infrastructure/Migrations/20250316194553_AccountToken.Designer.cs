// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using RentIt.Users.Infrastructure.Data;

#nullable disable

namespace RentIt.Users.Infrastructure.Migrations
{
    [DbContext(typeof(RentItDbContext))]
    [Migration("20250316194553_AccountToken")]
    partial class AccountToken
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("RentIt.Users.Core.Entities.Role", b =>
                {
                    b.Property<Guid>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("role_name");

                    b.HasKey("RoleId");

                    b.ToTable("roles", (string)null);

                    b.HasData(
                        new
                        {
                            RoleId = new Guid("11111111-1111-1111-1111-111111111111"),
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = new Guid("22222222-2222-2222-2222-222222222222"),
                            RoleName = "User"
                        },
                        new
                        {
                            RoleId = new Guid("33333333-3333-3333-3333-333333333333"),
                            RoleName = "Landlord"
                        });
                });

            modelBuilder.Entity("RentIt.Users.Core.Entities.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("last_name");

                    b.Property<string>("NormalizedEmail")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("normalized_email");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("44444444-4444-4444-4444-444444444444"),
                            CreatedAt = new DateTime(2025, 3, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@example.com",
                            FirstName = "Admin",
                            LastName = "Adminov",
                            NormalizedEmail = "admin@example.com",
                            PasswordHash = "HASHED_testadmin",
                            RefreshToken = "TEST_REFRESH_TOKEN_ADMIN",
                            RefreshTokenExpiryTime = new DateTime(2025, 3, 9, 0, 0, 0, 0, DateTimeKind.Utc),
                            RoleId = new Guid("11111111-1111-1111-1111-111111111111"),
                            Status = "Active",
                            UpdatedAt = new DateTime(2025, 3, 2, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            UserId = new Guid("55555555-5555-5555-5555-555555555555"),
                            CreatedAt = new DateTime(2025, 3, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "john.doe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            NormalizedEmail = "john.doe@example.com",
                            PasswordHash = "HASHED_testuser",
                            RefreshToken = "TEST_REFRESH_TOKEN_USER",
                            RefreshTokenExpiryTime = new DateTime(2025, 3, 9, 0, 0, 0, 0, DateTimeKind.Utc),
                            RoleId = new Guid("22222222-2222-2222-2222-222222222222"),
                            Status = "Active",
                            UpdatedAt = new DateTime(2025, 3, 2, 0, 0, 0, 0, DateTimeKind.Utc)
                        },
                        new
                        {
                            UserId = new Guid("66666666-6666-6666-6666-666666666666"),
                            CreatedAt = new DateTime(2025, 3, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "michael.smith@example.com",
                            FirstName = "Michael",
                            LastName = "Smith",
                            NormalizedEmail = "michael.smith@example.com",
                            PasswordHash = "HASHED_testlandlord",
                            RefreshToken = "TEST_REFRESH_TOKEN_LANDLORD",
                            RefreshTokenExpiryTime = new DateTime(2025, 3, 9, 0, 0, 0, 0, DateTimeKind.Utc),
                            RoleId = new Guid("33333333-3333-3333-3333-333333333333"),
                            Status = "Active",
                            UpdatedAt = new DateTime(2025, 3, 2, 0, 0, 0, 0, DateTimeKind.Utc)
                        });
                });

            modelBuilder.Entity("RentIt.Users.Core.Entities.UserProfile", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("country");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("phone_number");

                    b.HasKey("UserId");

                    b.ToTable("user_profiles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("44444444-4444-4444-4444-444444444444"),
                            Address = "Admin Address",
                            City = "Admin City",
                            Country = "Admin Country",
                            CreatedAt = new DateTime(2025, 3, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            PhoneNumber = "111-111-1111"
                        },
                        new
                        {
                            UserId = new Guid("55555555-5555-5555-5555-555555555555"),
                            Address = "Doe Address",
                            City = "Doe City",
                            Country = "Doe Country",
                            CreatedAt = new DateTime(2025, 3, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            PhoneNumber = "222-222-2222"
                        },
                        new
                        {
                            UserId = new Guid("66666666-6666-6666-6666-666666666666"),
                            Address = "Smith Address",
                            City = "Smith City",
                            Country = "Smith Country",
                            CreatedAt = new DateTime(2025, 3, 2, 0, 0, 0, 0, DateTimeKind.Utc),
                            PhoneNumber = "333-333-3333"
                        });
                });

            modelBuilder.Entity("RentIt.Users.Core.Entities.User", b =>
                {
                    b.HasOne("RentIt.Users.Core.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RentIt.Users.Core.Entities.UserProfile", b =>
                {
                    b.HasOne("RentIt.Users.Core.Entities.User", "User")
                        .WithOne("Profile")
                        .HasForeignKey("RentIt.Users.Core.Entities.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RentIt.Users.Core.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("RentIt.Users.Core.Entities.User", b =>
                {
                    b.Navigation("Profile")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
